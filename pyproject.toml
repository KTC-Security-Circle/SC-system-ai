[tool.poetry]
name = "sc-system-ai"
version = "0.4.1"
description = "Package for handling LLM in sc-system."
authors = ["Your Name <you@example.com>"]
readme = "README.md"
packages = [{include = "sc_system_ai", from = "src"}]


[tool.poetry.dependencies]
python = "^3.10"
langchain = "^0.3.4"
langchain-community = "^0.3.3"
langchain-openai = "^0.2.3"
duckduckgo-search = "^6.3.3"
azure-cosmos = "^4.7.0"


[tool.poetry.group.dev.dependencies]
langsmith = "^0.1.137"
langgraph = "^0.2.39"
pypdf = "^5.1.0"
beautifulsoup4 = "^4.12.3"
lxml = "^5.3.0"
ruff = "^0.7.2"
mypy = "^1.13.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


# Ruffの設定
[tool.ruff]
target-version = "py310"
exclude = [
    ".venv",
    "venv",
    "__pycache__",
    ".git",
]

line-length = 120
indent-width = 4


[tool.ruff.lint]
# PEP8のどのルールを対象に警告を出すか
select = [
    "E",
    "F",
    "W",
    "I",
    "B",
    "PL",
    "UP",
]
ignore = [
]
fixable = ["ALL"]

[tool.ruff.lint.pylint]
max-args = 9


[tool.mypy]
show_error_context = true # エラー時のメッセージを詳細表示
show_column_numbers = true # エラー発生箇所の行数/列数を表示
ignore_missing_imports = true # import 先のチェックを行わない (デフォルトだとサードパーティーライブラリまでチェックする)
disallow_untyped_defs = true # 関数定義の引数/戻り値に型アノテーション必須
no_implicit_optional = true # デフォルト引数に None を取る場合型アノテーションに Optional 必須
warn_return_any = true # 戻り値が Any 型ではない関数の戻り値の型アノテーションが Any のとき警告
warn_unused_ignores = true # mypy エラーに該当しない箇所に `# type: ignore` コメントが付与されていたら警告
warn_redundant_casts = true # 冗長なキャストに警告
